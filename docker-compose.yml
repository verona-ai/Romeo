services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=romeo
      - POSTGRES_USER=romeo
      - POSTGRES_PASSWORD=romeo_password
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U romeo -d romeo"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Migration service to handle Prisma schema updates
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    environment:
      - DATABASE_URL=postgresql://romeo:romeo_password@postgres:5432/romeo
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./packages/database:/app/packages/database
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
    working_dir: /app/packages/database
    command: ["tail", "-f", "/dev/null"]  # Keep container running

  # Worker service (Romeo AI Agent)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    ports:
      - "3030:3030"
    environment:
      - DATABASE_URL=postgresql://romeo:romeo_password@postgres:5432/romeo
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_started
    volumes:
      - ./worker:/app/worker
      - ./packages:/app/packages
    restart: unless-stopped

  # Web application (optional - uncomment if you want to run the web app)
  # web:
  #   build: .
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - DATABASE_URL=postgresql://romeo:romeo_password@postgres:5432/romeo
  #     - NEXT_PUBLIC_API_URL=http://localhost:3001
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   volumes:
  #     - ./web:/app/web
  #     - ./packages:/app/packages

volumes:
  postgres_data:
